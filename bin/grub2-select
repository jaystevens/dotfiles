#! /usr/bin/env python
#
# The MIT License (MIT)
#
# Copyright (c) 2014-2021 Jason Stevens
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import sys
if sys.version_info < (3, 0):
    import StringIO as io
else:
    import io

class grub2select():
    menuCount = 1
    menuData = {}
    newEntry = ''
    grub2cfgData = io.StringIO()
    grubEnvData = io.StringIO()
    grub2Path = "/boot/grub2/"
    grub2cfgFile = os.path.join(grub2Path, 'grub.cfg')
    grub2cfg = grub2cfgFile
    grub2env = os.path.join(grub2Path, 'grubenv')
    grubDefault = str(None)
    grubDefaultMatch = None
    BLSCFG_MODE = False

    def detectGrubCfgFile(self):
        # efi systems don't have /boot/grub2/grub.cfg
        # use /boot/grub2/grubenv file to find the efi path to grub.cfg
        if not os.path.exists(self.grub2cfg):
            if os.path.exists(self.grub2env):
                if os.path.islink(self.grub2env):
                    link_path = os.readlink(self.grub2env)
                    if not link_path.startswith(os.sep):
                        link_path = os.path.abspath(os.path.join(self.grub2Path, link_path))
                    new_grub2cfg = os.path.join(os.path.dirname(link_path), 'grub.cfg')
                    if os.path.exists(new_grub2cfg):
                        self.grub2cfg = new_grub2cfg


        """read in 'grub.cfg' and 'grub2-editenv list' and parse data"""
        if not os.path.exists(self.grub2cfg):
            print("unable to locate grub.cfg, is grub2 installed?")
            sys.exit(0)

        # efi boot links /boot/grub2/grub.cfg into the EFI partition
        # centos 7: ../efi/EFI/centos/grub.cfg
        # fedora  : ../efi/EFI/fedora/grub.cfg
        if os.path.islink(self.grub2cfg):
            link_path = os.readlink(self.grub2cfg)
            if not link_path.startswith(os.sep):
                self.grub2cfg = os.path.abspath(os.path.join(self.grub2Path, link_path))
            else:
                self.grub2cfg = link_path

    def checkBLSCFG(self):
        sysconfigGrubFile = '/etc/sysconfig/grub'

        if not os.path.exists(sysconfigGrubFile):
            if os.path.exists('/etc/default/grub'):
                sysconfigGrubFile = '/etc/default/grub'
            else:
                return

        if os.path.islink(sysconfigGrubFile):
            link_path = os.readlink(sysconfigGrubFile)
            if not link_path.startswith(os.sep):
                sysconfigGrubFile = os.path.abspath(os.path.join('/etc/sysconfig', link_path))
            else:
                sysconfigGrubFile = link_path

        sysconfigGrubData = io.StringIO()
        f = open(sysconfigGrubFile)
        sysconfigGrubData.write(f.read())
        f.close()
        del(f)
        sysconfigGrubData.seek(0)

        for line in sysconfigGrubData:
            if line.strip().lower().count('blscfg') > 0:
                if line.strip().lower().count('true') > 0:
                    self.BLSCFG_MODE = True
                    print('BLSCFG is enabled')
                    return
                    #print('BLS Mode is enabled in {}'.format(sysconfigGrubFile))
                    #print('line to edit: {}'.format(line))
                    #sys.exit(0)

    def parseBLSCFG(self):
        BLS_dir = '/boot/loader/entries'

        if not os.path.exists(BLS_dir):
            print('BLSCFG folder is missing: {}'.format(BLS_DIR))
            sys.exit(0)

        for fname in os.listdir(BLS_dir):
            fname_path = os.path.join(BLS_dir, fname)
            if os.path.isfile(fname_path):
                if fname_path.lower().endswith('.conf'):
                    menu = {"name": None, "id": None, "version": ''}
                    # file name is id
                    menu["id"] = fname.replace('.conf', '')
                    # read file to get title
                    fdata = io.StringIO()
                    f = open(fname_path)
                    fdata.write(f.read())
                    f.close()
                    del(f)
                    fdata.seek(0)
                    # walk file looking for title
                    for line in fdata:
                        if line.strip().lower().startswith('title'):
                            menu["name"] = line.strip().replace('title ', '')
                        if line.strip().lower().startswith('verson'):
                            menu["version"] = line.strip().replace('version ', '')
                            break
                    self.menuData[self.menuCount] = menu
                    self.menuCount += 1

    def parseGrubCfg(self):
        # load grub.cfg menu data
        self.grub2cfgData = io.StringIO()
        f = open(self.grub2cfg, "r")
        self.grub2cfgData.write(f.read())
        f.close()
        del(f)
        self.grub2cfgData.seek(0)

        # parse grub.cfg data
        self.menuData = {}
        self.menuCount = 1
        self.grub2cfgData.seek(0)
        for line in self.grub2cfgData:
            if line.strip().lower().startswith("menuentry "):
                menu = {"name": None, "id": None, "versin": ''}
                menu["name"] = line.split("'")[1]
                # ignore system setup as default boot entry - centos 8
                if menu["name"].lower().count('system setup') > 0:
                    continue
                if line.count('$menuentry_id_option') > 0:
                    menu["id"] = line.split('$menuentry_id_option')[1].split("'")[1]
                self.menuData[self.menuCount] = menu
                self.menuCount +=1


    def parseGrub(self):
        # load grub2 env data
        self.grubEnvData = io.StringIO()
        os.system("grub2-editenv list > /tmp/grub2-env.lst")
        f = open("/tmp/grub2-env.lst", "r")
        self.grubEnvData.write(f.read())
        f.close()
        del(f)
        self.grubEnvData.seek(0)

        # parse grubEnv for default
        self.grubDefault = str(None)
        self.grubDefaultMatch = None
        for line in self.grubEnvData:
            if line.lower().startswith("saved_entry="):
                self.grubDefault = line.replace("saved_entry=", "").strip()

        if self.BLSCFG_MODE is True:
            self.parseBLSCFG()
        else:
            self.parseGrubCfg()

        # try to match default => menu["id"]
        for item in self.menuData.keys():
            if self.menuData[item]["id"] is not None:
                if str(self.menuData[item]["id"]).count(self.grubDefault):
                    self.grubDefaultMatch = self.menuData[item]
                    break

        # try to match default => menu["name"]
        for item in self.menuData.keys():
            try:
                grubDefaultSplit = self.grubDefault.split(">")
                matchData = grubDefaultSplit[len(grubDefaultSplit)-1]
            except:
                matchData = self.grubDefault
            if self.menuData[item]["name"].count(matchData):
                self.grubDefaultMatch = self.menuData[item]
                break

    def selectKernel(self):
        # sort menuData
        rescueList = []
        tmpMenuData = {}
        tmpMenuCount = 1
        keyList = []
        if self.BLSCFG_MODE is True:
            keyList = sorted(self.menuData, reverse=False, key=lambda x: self.menuData[x]['version'])
        else:
            keyList = sorted(self.menuData.keys())

        for item in keyList:
            if self.menuData[item]['name'].lower().count('rescue') > 0:
                rescueList.append(item)
                continue
            tmpMenuData[tmpMenuCount] = self.menuData[item]
            tmpMenuCount += 1
        for item in rescueList:
            tmpMenuData[tmpMenuCount] = self.menuData[item]
            tmpMenuCount += 1
        self.menuData = tmpMenuData

        for item in self.menuData.keys():
            grubMatch = " "
            if self.grubDefaultMatch is not None:
                if self.menuData[item]['name'] is self.grubDefaultMatch['name']:
                    grubMatch = "*"
            print("{0}:{2}:{1}".format(item, self.menuData[item]["name"], grubMatch))
        print("")
        self.showGrubDefault()
        if sys.version_info < (3, 0):
            selection = raw_input("select number: ")
        else:
            selection = input("select number: ")
            selection = "{0}".format(selection)
        if not selection.isdigit():
            print("Invalid selection")
            sys.exit(0)

        try:
            selection = int(selection)
        except:
            print("Invalid selection")
            sys.exit(0)
        if (selection < 1) or (selection >= self.menuCount):
            print("Invalid selection")
            sys.exit(0)
        print("valid selection!\n")

        self.newEntry = self.menuData[selection]

        # grub.cfg - if have id use it
        #if self.newEntry["id"] is not None:
        #    os.system('grub2-set-default "{0}"'.format(self.newEntry["id"]))
        #else:
        #    os.system('grub2-set-default "{0}"'.format(self.newEntry["name"]))

        if self.BLSCFG_MODE is True:
            # BLS prefers to use the loader config file id over title
            os.system('grub2-set-default "{0}"'.format(self.newEntry["id"]))
        else:
            # grub.cfg use name
            os.system('grub2-set-default "{0}"'.format(self.newEntry["name"]))

        self.writeGrubCfg()

    def showGrubDefault(self):
        if self.grubDefaultMatch is not None:
            print("Current Default: {0}".format(self.grubDefaultMatch["name"]))
        else:
            print("Current Default: UNKNOWN")

    def writeGrubCfg(self):
        os.system('grub2-mkconfig -o {} > /dev/null 2>&1'.format(self.grub2cfg))

    def main(self):
        self.checkBLSCFG()
        self.detectGrubCfgFile()
        self.writeGrubCfg()
        self.parseGrub()
        self.selectKernel()
        self.parseGrub()
        self.showGrubDefault()

if __name__ == "__main__":
    try:
        program = grub2select()
        program.main()
    except KeyboardInterrupt:
        print("Bye!")
        sys.exit(0)
