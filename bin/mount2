#!/usr/bin/env python

import sys
import subprocess
import math

if sys.platform.startswith('darwin'):
    mount_cmd_path = '/sbin/mount'
else:
    mount_cmd_path = '/bin/mount'

mountcmd = subprocess.Popen(mount_cmd_path, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
intxt = mountcmd.communicate()[0]
intxt = intxt.split('\n')
outtxt = ''
outdict = {}
ignore_fs = [
        'sysfs',
        'proc',
        'devtmpfs',
        'securityfs',
        'tmpfs',
        'devpts',
        'cgroup',
        'pstore',
        'autofs',
        'configfs',
        'rpc_pipefs',
        'mqueue',
        'debugfs',
        'hugetlbfs',
        'nfsd',
        'binfmt_misc',
        'fuse.gvfsd-fuse',
        'fuse.gvfs-fuse-daemon',
        'fusectl',
        'selinuxfs',
        'efivarfs',
        'devfs',  # mac?
        ]
deviceLenList = [0]
pathLenList = [0]
fstypeLenList = [0]


for line in intxt:
    a = line.split()
    # mac has a different df column output than linux
    if sys.platform.startswith('darwin'):
        if len(a) > 1:
            # find 'on' keyword
            on_index = None
            on_cnt = 0
            for item in a:
                if item.strip() == 'on':
                    on_index = on_cnt
                    break
                on_cnt += 1

            # find '(' in item, i.e. options start
            opt_found = False
            mount_options = ''
            for item in a:
                if item.count('(') > 0:
                    opt_found = True
                if opt_found is True:
                    mount_options += item.strip()
            mount_options = mount_options.replace('mountedby', 'mounted by ')

            # get fstype from mount_options
            mount_options_split = mount_options.split(',')
            mount_fstype = mount_options_split[0].replace('(', '')
            # rebuild mount_options without fstype
            mount_options = mount_options.replace('{0},'.format(mount_fstype), '')

            mount_device = a[0].strip()
            mount_path = a[on_index+1].strip()

            # check for stuff to skip
            if (mount_device == 'devfs') or (mount_device == 'map'):
                continue

            outdict[mount_path.lower()] = {
                    'device': mount_device,
                    'path': mount_path,
                    'fstype': mount_fstype,
                    'options': mount_options
                    }
            deviceLenList.append(len(mount_device))
            pathLenList.append(len(mount_path))
            fstypeLenList.append(len(mount_fstype))

    else:
        # linux mode
        if len(a) > 4:
            if a[4] in ignore_fs:
                continue

            mount_device = a[0].strip()
            mount_path = a[2].strip()
            mount_fstype = a[4].strip()
            mount_options = a[5].strip()
            outdict[mount_path.lower()] = {
                'device': mount_device,
                'path': mount_path,
                'fstype': mount_fstype,
                'options': mount_options
                }
            deviceLenList.append(len(mount_device))
            pathLenList.append(len(mount_path))
            fstypeLenList.append(len(mount_fstype))

deviceMax = max(deviceLenList)
pathMax = max(pathLenList)
fstypeMax = max(fstypeLenList)
deviceTab = (int(math.ceil(deviceMax / 4.0))) * 4
if deviceTab == deviceMax:
    deviceTab += 4
pathTab = (int(math.ceil(pathMax / 4.0))) * 4
if pathTab == pathMax:
    pathTab += 4
fstypeTab = (int(math.ceil(fstypeMax / 4.0))) * 4
if fstypeTab == fstypeMax:
    fstypeTab += 4

outtxt = ''

for key in sorted(outdict.iterkeys()):
    prep_device = outdict[key]['device']
    prep_device = prep_device.ljust(deviceTab)
    prep_path = outdict[key]['path']
    prep_path = prep_path.ljust(pathTab)
    prep_fstype = outdict[key]['fstype']
    prep_fstype = prep_fstype.ljust(fstypeTab)
    prep_options = outdict[key]['options']
    outtxt += '{0}{1}{2}{3}\n'.format(prep_device, prep_path, prep_fstype, prep_options)
outtxt = outtxt.rstrip('\n')
print(outtxt)

